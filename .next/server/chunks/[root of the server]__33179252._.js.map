{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/vikas/OneDrive/Desktop/Recal%21pro/utils/supabase/server.ts"],"sourcesContent":["import { createClient as createSupabaseClient } from '@supabase/supabase-js'\r\n\r\nexport function createClient() {\r\n  const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL\r\n  const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY\r\n\r\n  if (!supabaseUrl || !supabaseServiceRoleKey) {\r\n    throw new Error('Missing Supabase environment variables')\r\n  }\r\n\r\n  return createSupabaseClient(supabaseUrl, supabaseServiceRoleKey)\r\n} "],"names":[],"mappings":";;;AAAA;;AAEO,SAAS;IACd,MAAM;IACN,MAAM,yBAAyB,QAAQ,GAAG,CAAC,yBAAyB;IAEpE,IAAI,CAAC,eAAe,CAAC,wBAAwB;QAC3C,MAAM,IAAI,MAAM;IAClB;IAEA,OAAO,CAAA,GAAA,yLAAA,CAAA,eAAoB,AAAD,EAAE,aAAa;AAC3C","debugId":null}},
    {"offset": {"line": 167, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/vikas/OneDrive/Desktop/Recal%21pro/utils/otp.ts"],"sourcesContent":["const OTP_API_BASE = 'https://cpaas.messagecentral.com/verification/v3'\r\nconst AUTH_TOKEN = process.env.OTP_AUTH_TOKEN\r\nconst CUSTOMER_ID = process.env.OTP_CUSTOMER_ID\r\n\r\nexport async function sendOTP(phoneNumber: string): Promise<{\r\n  success: boolean\r\n  verificationId?: string\r\n  error?: string\r\n}> {\r\n  try {\r\n    const response = await fetch(\r\n      `${OTP_API_BASE}/send?countryCode=91&customerId=${CUSTOMER_ID}&flowType=SMS&mobileNumber=${phoneNumber}`,\r\n      {\r\n        method: 'POST',\r\n        headers: {\r\n          'authToken': AUTH_TOKEN!\r\n        }\r\n      }\r\n    )\r\n\r\n    const data = await response.json()\r\n    \r\n    if (data.responseCode === 200) {\r\n      return {\r\n        success: true,\r\n        verificationId: data.data.verificationId\r\n      }\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      error: data.message || 'Failed to send OTP'\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      error: 'Failed to send OTP'\r\n    }\r\n  }\r\n}\r\n\r\nexport async function verifyOTP(phoneNumber: string, verificationId: string, code: string): Promise<{\r\n  success: boolean\r\n  error?: string\r\n}> {\r\n  try {\r\n    const response = await fetch(\r\n      `${OTP_API_BASE}/validateOtp?countryCode=91&mobileNumber=${phoneNumber}&verificationId=${verificationId}&customerId=${CUSTOMER_ID}&code=${code}`,\r\n      {\r\n        method: 'GET',\r\n        headers: {\r\n          'authToken': AUTH_TOKEN!\r\n        }\r\n      }\r\n    )\r\n\r\n    const data = await response.json()\r\n    \r\n    if (data.responseCode === 200 && data.data.verificationStatus === 'VERIFICATION_COMPLETED') {\r\n      return {\r\n        success: true\r\n      }\r\n    }\r\n    \r\n    return {\r\n      success: false,\r\n      error: data.message || 'Invalid OTP'\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      error: 'Failed to verify OTP'\r\n    }\r\n  }\r\n} "],"names":[],"mappings":";;;;AAAA,MAAM,eAAe;AACrB,MAAM,aAAa,QAAQ,GAAG,CAAC,cAAc;AAC7C,MAAM,cAAc,QAAQ,GAAG,CAAC,eAAe;AAExC,eAAe,QAAQ,WAAmB;IAK/C,IAAI;QACF,MAAM,WAAW,MAAM,MACrB,GAAG,aAAa,gCAAgC,EAAE,YAAY,2BAA2B,EAAE,aAAa,EACxG;YACE,QAAQ;YACR,SAAS;gBACP,aAAa;YACf;QACF;QAGF,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,KAAK,YAAY,KAAK,KAAK;YAC7B,OAAO;gBACL,SAAS;gBACT,gBAAgB,KAAK,IAAI,CAAC,cAAc;YAC1C;QACF;QAEA,OAAO;YACL,SAAS;YACT,OAAO,KAAK,OAAO,IAAI;QACzB;IACF,EAAE,OAAO,OAAO;QACd,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;AACF;AAEO,eAAe,UAAU,WAAmB,EAAE,cAAsB,EAAE,IAAY;IAIvF,IAAI;QACF,MAAM,WAAW,MAAM,MACrB,GAAG,aAAa,yCAAyC,EAAE,YAAY,gBAAgB,EAAE,eAAe,YAAY,EAAE,YAAY,MAAM,EAAE,MAAM,EAChJ;YACE,QAAQ;YACR,SAAS;gBACP,aAAa;YACf;QACF;QAGF,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,KAAK,YAAY,KAAK,OAAO,KAAK,IAAI,CAAC,kBAAkB,KAAK,0BAA0B;YAC1F,OAAO;gBACL,SAAS;YACX;QACF;QAEA,OAAO;YACL,SAAS;YACT,OAAO,KAAK,OAAO,IAAI;QACzB;IACF,EAAE,OAAO,OAAO;QACd,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 231, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/vikas/OneDrive/Desktop/Recal%21pro/app/api/auth/forgot-password/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport { cookies } from 'next/headers'\r\nimport { createClient } from '../../../../utils/supabase/server'\r\nimport { sendOTP } from '@/utils/otp'\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const body = await request.json()\r\n    const { phone } = body\r\n\r\n    if (!phone) {\r\n      return NextResponse.json({ error: 'Phone number is required' }, { status: 400 })\r\n    }\r\n\r\n    // Check if user exists\r\n    const supabase = createClient()\r\n    const { data: user } = await supabase\r\n      .from('users')\r\n      .select('id')\r\n      .eq('phone', phone)\r\n      .single()\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: 'No account found with this phone number' },\r\n        { status: 404 }\r\n      )\r\n    }\r\n\r\n    // Send OTP\r\n    const { verificationId, error: otpError } = await sendOTP(phone)\r\n    if (otpError) {\r\n      return NextResponse.json({ error: otpError }, { status: 400 })\r\n    }\r\n\r\n    // Create response with verification ID and set cookie in one go\r\n    const response = NextResponse.json({ success: true, verificationId })\r\n\r\n    // Set cookie for phone verification\r\n    const cookieStore = await cookies()\r\n    cookieStore.set('reset_phone', phone, {\r\n      httpOnly: true,\r\n      secure: process.env.NODE_ENV === 'production',\r\n      sameSite: 'lax',\r\n      maxAge: 600 // 10 minutes\r\n    })\r\n\r\n    return response\r\n  } catch (error) {\r\n    console.error('Forgot password error:', error)\r\n    return NextResponse.json(\r\n      { error: 'Failed to process forgot password request' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,KAAK,EAAE,GAAG;QAElB,IAAI,CAAC,OAAO;YACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAA2B,GAAG;gBAAE,QAAQ;YAAI;QAChF;QAEA,uBAAuB;QACvB,MAAM,WAAW,CAAA,GAAA,6HAAA,CAAA,eAAY,AAAD;QAC5B,MAAM,EAAE,MAAM,IAAI,EAAE,GAAG,MAAM,SAC1B,IAAI,CAAC,SACL,MAAM,CAAC,MACP,EAAE,CAAC,SAAS,OACZ,MAAM;QAET,IAAI,CAAC,MAAM;YACT,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA0C,GACnD;gBAAE,QAAQ;YAAI;QAElB;QAEA,WAAW;QACX,MAAM,EAAE,cAAc,EAAE,OAAO,QAAQ,EAAE,GAAG,MAAM,CAAA,GAAA,8GAAA,CAAA,UAAO,AAAD,EAAE;QAC1D,IAAI,UAAU;YACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAS,GAAG;gBAAE,QAAQ;YAAI;QAC9D;QAEA,gEAAgE;QAChE,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAM;QAAe;QAEnE,oCAAoC;QACpC,MAAM,cAAc,MAAM,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;QAChC,YAAY,GAAG,CAAC,eAAe,OAAO;YACpC,UAAU;YACV,QAAQ,oDAAyB;YACjC,UAAU;YACV,QAAQ,IAAI,aAAa;QAC3B;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,0BAA0B;QACxC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA4C,GACrD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}